,'B7304'  #Persons_Other_services_Total
,'B7314'  #Persons_Not_Elsewhere_Classified_Total
)]
# Create proportions
B43$B43_Total <- rowSums(B43[c(2:ncol(B43))])
# Create percentages but keep total
for (j in 2:(ncol(B43)-1)){
B43[,j] <- B43[,j]/(B43[c("B43_Total")])
}
B43[is.na(B43)] <- 0
B43 <- B43[order(B43$region_id),]
rm(j)
#*****************************************************************
# collate
cen <- cbind(B45,B28[c(-1)],B04[c(-1)],B25[c(-1)],B43[c(-1)])
head(cen)
#*****************************************************************
# 4. Get C-Australia data, transpose segments and append postcode ####
#postcode-sa1 lookup
pc_sa1 <- downloadSQL('AUSYD5320'
,'DT_DA_ABS_Geography_2011'
,'SA1_Relations')
pc_sa1 <- pc_sa1[c("SA1_2011","POA_2011")]
pc_sa1 <- rename(pc_sa1,c("SA1_2011" = "region_id"))
# Get C AUstralia SA1 and Segment description
caust <- downloadSQL('AUSYD0312'
,'DT_MEDIBANK_CTS_2014'
,'[REF_CAUST_2013]')
caust_name <- downloadSQL('AUSYD0312'
,'DT_MEDIBANK_CTS_2014'
,'[REF_CAUST_GROUPS]')
caust_desc <- sqldf("
select a.SA1
,b.segment_name
from caust a
,caust_name b
where a.Segment_2011 = b.segment_id
")
# Transpose C-Australia and binarise
long.mydata <- melt(caust_desc, id.vars = "segment_name")
caust_tpose <- dcast(long.mydata, value ~ segment_name, function(x) 1, fill = 0)
caust_tpose <- rename(caust_tpose,c("value" = "region_id"))
# Join postcode to SA1 data
sa1_pc_caust <- sqldf("
select a.region_id
,a.POA_2011
,b.Segment_2011
from  pc_sa1 a
,caust b
where a.region_id = b.SA1
")
sa1_pc_caust$postcode <- substr(sa1_pc_caust$POA_2011,4,7)
# 5. Create SA1 level dataset with Census and C-Australia and upload to database ####
to_score <- merge(caust_tpose,cen,by="region_id")
head(to_score)
dropTableIfExisitsSQL('AUSYD5321'
,'DT_SUNCORP_BLADE_UPDATE_2014'
,'MOD_ATO_TO_SCORE')
uploadSQL('AUSYD5321'
,'DT_SUNCORP_BLADE_UPDATE_2014'
,'MOD_ATO_TO_SCORE'
,to_score)
# 6. Calculate weighted C-Australia proportions at postcode level ####
# 7. Calculate weighted census proportions at postcode level ####
# Join on postcodes based on region id
to_score_pc <- join(to_score,sa1_pc_caust,by = "region_id",type = "left")
# Creates totals subset and sums based on postcode
pc_totals <- aggregate(to_score_pc[c("B45_Total"
,"B28_Total"
,"B04_Total"
,"B25_Total"
,"B43_Total"
)]
,by = to_score_pc[c("postcode")]
, "sum"
)
# Rename before joining back on to denote postcode level total
pc_totals <- rename(pc_totals, c("B45_Total" = "B45_pcTotal"
,"B28_Total" = "B28_pcTotal"
,"B04_Total" = "B04_pcTotal"
,"B25_Total" = "B25_pcTotal"
,"B43_Total" = "B43_pcTotal"
)       )
# Choose columns required and join on postcode level totals
to_score_pc_sum_ca <- join(to_score_pc[c(
"region_id"
,"postcode"
# CAustralia Segment
,"Affluent Coastal Lifestyle"
,"Aged Care and Hospitals"               ,"Bottoms Up"
,"Chinese Migrant Enclaves"              ,"City Sprawl"
,"Declining Affluence"                   ,"Defence Establishments"
,"Developers Dream Estates"              ,"Down to Earth"
,"Downward Spiral"                       ,"Established and Comfortable"
,"Established Greek Enclaves"            ,"Established Italian Home Owners"
,"Even Stevens"                          ,"Foreign Students and New Arrivals"
,"Forestry  Fishing and Farming"         ,"High Amenity and Rising"
,"High Net Worth and Luxury Living"      ,"Indigenous Australia"
,"Level Headed"                          ,"Living Alone"
,"Long Commute Families"                 ,"Low Income Workers"
,"Mainstream Estate Living "             ,"Mainstream Professionals"
,"Mineral Boom"                          ,"Mixed Farming"
,"Moderate Base and Rising"              ,"Multicultural Mix"
,"Nappy Valley"                          ,"New and Upmarket Estates"
,"On the Edge"                           ,"Primarily Non-Residential"
,"Regional Growth"                       ,"Regional Lifestyle Living"
,"Rental and Group Households"           ,"Rusting Rural"
,"Social Stress"                         ,"Sole Parent Struggle"
,"Stable Mature Families"                ,"Struggling Coastal Living"
,"Student Lifestyle"                     ,"Taking Off"
,"Treechange"                            ,"Uber Professionals with Rising Wealth"
,"Upward Bound"                          ,"Urban Sophisticates"
,"Urban Workers"                         ,"Vibrant Inner Suburban Mix"
,"Vietnamese Migrant Enclaves"
,"B43_Total")]
,pc_totals[c("postcode","B43_pcTotal")]
,by = "postcode"
,type = "left")
to_score_pc_sum_b45 <- join(to_score_pc[c(
"region_id"
,"postcode"
# B45 OCCUPATION BY AGE BY SEX
,"B7825"
,"B7826"
,"B7827"
,"B7828"
,"B7829"
,"B7830"
,"B7831"
,"B7832"
,"B7833"
,"B45_Total")]
,pc_totals[c("postcode","B45_pcTotal")]
,by = "postcode"
,type = "left")
to_score_pc_sum_b28 <- join(to_score_pc[c(
"region_id"
,"postcode"
# B28 TOTAL HOUSEHOLD INCOME (WEEKLY) BY HOUSEHOLD COMPOSITION
,"B4968"
,"B4971"
,"B4974"
,"B4977"
,"B4980"
,"B4983"
,"B4986"
,"B4989"
,"B4992"
,"B4995"
,"B4998"
,"B5001"
,"B5004"
,"B5007"
,"B5010"
,"B28_Total")]
,pc_totals[c("postcode","B28_pcTotal")]
,by = "postcode"
,type = "left")
to_score_pc_sum_b04 <- join(to_score_pc[c(
"region_id"
,"postcode"
# B04 PERSONS BY AGE
,"B274"
,"B292"
,"B310"
,"B328"
,"B346"
,"B364"
,"B382"
,"B400"
,"B418"
,"B436"
,"B454"
,"B472"
,"B490"
,"B508"
,"B526"
,"B544"
,"B547"
,"B550"
,"B553"
,"B556"
,"B559"
,"B04_Total")]
,pc_totals[c("postcode","B04_pcTotal")]
,by = "postcode"
,type = "left")
to_score_pc_sum_b25 <- join(to_score_pc[c(
"region_id"
,"postcode"
# B25 FAMILY COMPOSITION
,"B4822"
,"B4842"
,"B4864"
,"B4862"
,"B25_Total")]
,pc_totals[c("postcode","B25_pcTotal")]
,by = "postcode"
,type = "left")
to_score_pc_sum_b43 <- join(to_score_pc[c(
"region_id"
,"postcode"
# B43 INDUSTRY OF EMPLOYMENT - COUNT OF PERSONS
,"B7124"
,"B7134"
,"B7144"
,"B7154"
,"B7164"
,"B7174"
,"B7184"
,"B7194"
,"B7204"
,"B7214"
,"B7224"
,"B7234"
,"B7244"
,"B7254"
,"B7264"
,"B7274"
,"B7284"
,"B7294"
,"B7304"
,"B43_Total")]
,pc_totals[c("postcode","B43_pcTotal")]
,by = "postcode"
,type = "left")
# Create a proportion value by dividing the SA1 population and Postcode population
to_score_pc_sum_ca$B43proportion <- to_score_pc_sum_ca$B43_Total / to_score_pc_sum_ca$B43_pcTotal
to_score_pc_sum_b45$B45proportion <- to_score_pc_sum_b45$B45_Total / to_score_pc_sum_b45$B45_pcTotal
to_score_pc_sum_b28$B28proportion <- to_score_pc_sum_b28$B28_Total / to_score_pc_sum_b28$B28_pcTotal
to_score_pc_sum_b04$B04proportion <- to_score_pc_sum_b04$B04_Total / to_score_pc_sum_b04$B04_pcTotal
to_score_pc_sum_b25$B25proportion <- to_score_pc_sum_b25$B25_Total / to_score_pc_sum_b25$B25_pcTotal
to_score_pc_sum_b43$B43proportion <- to_score_pc_sum_b43$B43_Total / to_score_pc_sum_b43$B43_pcTotal
# Multiply Descriptive column percentages with the proportions to find SA1 percentage within postcode
for (j in 3:(ncol(to_score_pc_sum_ca)-3)){
to_score_pc_sum_ca[,j] <- to_score_pc_sum_ca[,j] * to_score_pc_sum_ca[c("B43proportion")]
}
rm(j)
for (j in 3:(ncol(to_score_pc_sum_b45)-3)){
to_score_pc_sum_b45[,j] <- to_score_pc_sum_b45[,j] * to_score_pc_sum_b45[c("B45proportion")]
}
rm(j)
for (j in 3:(ncol(to_score_pc_sum_b28)-3)){
to_score_pc_sum_b28[,j] <- to_score_pc_sum_b28[,j] * to_score_pc_sum_b28[c("B28proportion")]
}
rm(j)
for (j in 3:(ncol(to_score_pc_sum_b04)-3)){
to_score_pc_sum_b04[,j] <- to_score_pc_sum_b04[,j] * to_score_pc_sum_b04[c("B04proportion")]
}
rm(j)
for (j in 3:(ncol(to_score_pc_sum_b25)-3)){
to_score_pc_sum_b25[,j] <- to_score_pc_sum_b25[,j] * to_score_pc_sum_b25[c("B25proportion")]
}
rm(j)
for (j in 3:(ncol(to_score_pc_sum_b43)-3)){
to_score_pc_sum_b43[,j] <- to_score_pc_sum_b43[,j] * to_score_pc_sum_b43[c("B43proportion")]
}
rm(j)
# Roll up SA1 fields into postcode level by summing the percentages.
census_sum_to_pc_ca <- aggregate(to_score_pc_sum_ca[,!colnames(to_score_pc_sum_ca) %in% c("postcode","region_id","B43_Total","B43_pcTotal","B43proportion")]
,by = to_score_pc_sum_ca[c("postcode")]
,FUN = "sum")
census_sum_to_pc_b45 <- aggregate(to_score_pc_sum_b45[,!colnames(to_score_pc_sum_b45) %in% c("postcode","region_id","B45_Total","B45_pcTotal","B45proportion")]
,by = to_score_pc_sum_b45[c("postcode")]
,FUN = "sum")
census_sum_to_pc_b28 <- aggregate(to_score_pc_sum_b28[,!colnames(to_score_pc_sum_b28) %in% c("postcode","region_id","B28_Total","B28_pcTotal","B28proportion")]
,by = to_score_pc_sum_b28[c("postcode")]
,FUN = "sum")
census_sum_to_pc_b04 <- aggregate(to_score_pc_sum_b04[,!colnames(to_score_pc_sum_b04) %in% c("postcode","region_id","B04_Total","B04_pcTotal","B04proportion")]
,by = to_score_pc_sum_b04[c("postcode")]
,FUN = "sum")
census_sum_to_pc_b25 <- aggregate(to_score_pc_sum_b25[,!colnames(to_score_pc_sum_b25) %in% c("postcode","region_id","B25_Total","B25_pcTotal","B25proportion")]
,by = to_score_pc_sum_b25[c("postcode")]
,FUN = "sum")
census_sum_to_pc_b43 <- aggregate(to_score_pc_sum_b43[,!colnames(to_score_pc_sum_b43) %in% c("postcode","region_id","B43_Total","B43_pcTotal","B43proportion")]
,by = to_score_pc_sum_b43[c("postcode")]
,FUN = "sum")
head(census_sum_to_pc_ca)
census_pc_mod_table <- census_sum_to_pc_ca[c("postcode")]
# Bring in Tax data
census_pc_mod_table <- join(census_pc_mod_table
,ato1[c( "postcode"
,"DT_DISP_Inc"          ,"DT_impcred11"
,"DT_impcred11d"        ,"DT_ginterest11c"
,"DT_ginterest11d"      ,"DT_netcapgain11c"
,"DT_netcapgain11d"     ,"DT_ninclosspp11"
,"DT_ninclossnpp11"
,"DT_netrent11"
)]
,by = "postcode"
,type = "left"
)
census_pc_mod_table <- join(census_pc_mod_table
,census_sum_to_pc_ca
,by = "postcode"
,type = "left"
)
census_pc_mod_table <- join(census_pc_mod_table
,census_sum_to_pc_b45
,by = "postcode"
,type = "left"
)
census_pc_mod_table <- join(census_pc_mod_table
,census_sum_to_pc_b28
,by = "postcode"
,type = "left"
)
census_pc_mod_table <- join(census_pc_mod_table
,census_sum_to_pc_b04
,by = "postcode"
,type = "left"
)
census_pc_mod_table <- join(census_pc_mod_table
,census_sum_to_pc_b25
,by = "postcode"
,type = "left"
)
census_pc_mod_table <- join(census_pc_mod_table
,census_sum_to_pc_b43
,by = "postcode"
,type = "left"
)
census_pc_mod_table[is.na(census_pc_mod_table)] <- 0
census_pc_mod_table<- census_pc_mod_table[order(census_pc_mod_table$postcode),]
dropTableIfExisitsSQL('AUSYD5321'
,'DT_SUNCORP_BLADE_UPDATE_2014'
,'MOD_ATO_POSTCODE_PERC')
uploadSQL('AUSYD5321'
,'DT_SUNCORP_BLADE_UPDATE_2014'
,'MOD_ATO_POSTCODE_PERC'
,census_pc_mod_table)
library(plyr)
library(randomForest)
install.packages("randomforest")
install.packages("randomForest")
library("randomForest", lib.loc="C:/Users/bhicks/Documents/R/win-library/3.0")
library(plyr)
library(randomForest)
pc_mod <- downloadSQL('AUSYD5321'
,'DT_SUNCORP_BLADE_UPDATE_2014'
,'[MOD_ATO_POSTCODE_PERC]')
names(pc_mod)
head(pc_mod)
set.seed(10)
pc_mod_rf <- randomForest(DT_DISP_Inc ~
AffluentCoastalLifestyle           +AgedCareandHospitals              +BottomsUp
+ChineseMigrantEnclaves            +CitySprawl                        +DecliningAffluence
+DefenceEstablishments             +DevelopersDreamEstates            +DowntoEarth
+DownwardSpiral                    +EstablishedandComfortable         +EstablishedGreekEnclaves
+EstablishedItalianHomeOwners      +EvenStevens                       +ForeignStudentsandNewArrivals
+ForestryFishingandFarming         +HighAmenityandRising              +HighNetWorthandLuxuryLiving
+IndigenousAustralia               +LevelHeaded                       +LivingAlone
+LongCommuteFamilies               +LowIncomeWorkers                  +MainstreamEstateLiving
+MainstreamProfessionals           +MineralBoom                       +MixedFarming
+ModerateBaseandRising             +MulticulturalMix                  +NappyValley
+NewandUpmarketEstates             +OntheEdge                         +PrimarilyNonResidential
+RegionalGrowth                    +RegionalLifestyleLiving           +RentalandGroupHouseholds
+RustingRural                      +SocialStress                      +SoleParentStruggle
+StableMatureFamilies              +StrugglingCoastalLiving           +StudentLifestyle
+TakingOff                         +Treechange                        +UberProfessionalswithRisingWealth
+UpwardBound                       +UrbanSophisticates                +UrbanWorkers
+VibrantInnerSuburbanMix           +VietnameseMigrantEnclaves         +B7825
+B7826                             +B7827                             +B7828
+B7829                             +B7830                             +B7831
+B7832                             +B7833                             +B4968
+B4971                             +B4974                             +B4977
+B4980                             +B4983                             +B4986
+B4989                             +B4992                             +B4995
+B4998                             +B5001                             +B5004
+B5007                             +B5010                             +B274
+B292                              +B310                              +B328
+B346                              +B364                              +B382
+B400                              +B418                              +B436
+B454                              +B472                              +B490
+B508                              +B526                              +B544
+B547                              +B550                              +B553
+B556                              +B559                              +B4822
+B4842                             +B4864                             +B4862
+B7124                             +B7134                             +B7144
+B7154                             +B7164                             +B7174
+B7184                             +B7194                             +B7204
+B7214                             +B7224                             +B7234
+B7244                             +B7254                             +B7264
+B7274                             +B7284                             +B7294
+B7304
,data = pc_mod
)
to_score_sa1 <- to_score_pc #to_score_pc comes from the Prepare ADS file.
names(to_score_sa1) <- gsub(" |-","",colnames(to_score_sa1))
pc_mod_rf
SA1_mod_rf_DISP_Inc <- predict(pc_mod_rf,to_score_sa1[,!colnames(to_score_sa1) %in% c("region_id","B45_Total","B28_Total","B04_Total","B25_Total","B43_Total","POA_2011","Segment_2011","postcode")],type = "response")
#Combine to have predicted values with SA1 and postcode
DT_DISP_Inc_predict <- cbind(to_score_sa1[c("region_id","postcode")],SA1_mod_rf_DISP_Inc)
#Multiply predicted value by Number of working population B43_Total
DT_DISP_Inc_predict$SA1_mod_rf_DISP_Inc <- DT_DISP_Inc_predict$SA1_mod_rf_DISP_Inc * to_score_sa1$B43_Total
#Roll up to obtain predicted SA1 values at postcode level
DT_DISP_Inc_predict_pc <- aggregate(DT_DISP_Inc_predict$SA1_mod_rf_DISP_Inc,by = DT_DISP_Inc_predict[c("postcode")],"sum")
DT_DISP_Inc_check_pc <- join(DT_DISP_Inc_predict_pc,census_pc_mod_table[c("postcode","DT_DISP_Inc")],by = "postcode", type = "left")
DT_DISP_Inc_check_pc <- join(DT_DISP_Inc_check_pc,ato[c("postcode","Number of individuals #")],by = "postcode", type = "left")
DT_DISP_Inc_check_pc[is.na(DT_DISP_Inc_check_pc)] <- 0
DT_DISP_Inc_check_pc$DT_DISP_Inc_Actual <- DT_DISP_Inc_check_pc[,3] * DT_DISP_Inc_check_pc[,4]
#Join back onto SA1 table for division
DT_DISP_Inc_factor <- join(DT_DISP_Inc_predict,DT_DISP_Inc_check_pc[c("postcode","weighting")],by = "postcode",type = "left")
#division Factor to get adjusted SA1 value
DT_DISP_Inc_factor$Adjusted_value <- DT_DISP_Inc_factor$SA1_mod_rf_DISP_Inc / DT_DISP_Inc_factor$weighting
DT_DISP_Inc_factor$Adjusted_value[is.infinite(DT_DISP_Inc_factor$Adjusted_value)] <- 0
#Final Table
DT_DISP_Inc_SA1_FINAL <- DT_DISP_Inc_factor[c("region_id","Adjusted_value")]
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
library(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
amzn
sampletimes
sampleTimes
install.packages("knitr")
library("knitr", lib.loc="C:/Users/bhicks/Documents/R/win-library/3.0")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
setwd("C:/Users/bhicks/Desktop/Github/RepData_PeerAssessment1")
knit2html("ReproducibleResearch_assignment1.Rmd")
df <- read.csv("activity.csv")
df <- read.csv("activity.csv")
library(plyr)
byDaySummary <- ddply(df, .(date), summarise, stepsPerDay = sum(steps))
byIntervalSummary <- ddply(df, .(interval), summarise, averageStepsPerInterval = mean(steps,na.rm=TRUE))
intervals24hour <- strptime(formatC(df$interval[1:288],width = 4, format = "d", flag = "0"), "%H%M")
byIntervalSummary <- cbind(intervals24hour, byIntervalSummary)
hist(byDaySummary$stepsPerDay,
breaks = 30,
col="blue",
main = "Steps taken per day",
xlab = "Number of steps")
meanStepsPerDay <- round(mean(byDaySummary$stepsPerDay,na.rm=TRUE))
medianStepsPerDay <- round(median(byDaySummary$stepsPerDay,na.rm=TRUE))
plot(byIntervalSummary$intervals24hour,byIntervalSummary$averageStepsPerInterval,
type = "l",
xlab = "Interval",
ylab = "Average steps")
maxActivityInterval <- byIntervalSummary$interval[which.max(byIntervalSummary$averageStepsPerInterval)]
numberOfMissingValues <- sum(is.na(df$steps))
locationNA <- is.na(df$steps)
intervalMeansExtension <- as.data.frame(rep(byIntervalSummary$averageStepsPerInterval, times = 61))
names(intervalMeansExtension)  <- c("intervalMeansExtension")
dfImputed <- cbind(df, intervalMeansExtension)
dfImputed$steps[locationNA]<- dfImputed$intervalMeansExtension[locationNA]
byDaySummaryImputed <- ddply(dfImputed, .(date), summarise, stepsPerDay = sum(steps,na.rm=TRUE))
hist(byDaySummaryImputed$stepsPerDay,
breaks = 30,
col="blue",
main = "Steps taken per day with imputed values for missing values",
xlab = "Number of steps")
meanStepsPerDayImputed <- round(mean(byDaySummaryImputed$stepsPerDay))
medianStepsPerDayImputed <- round(median(byDaySummaryImputed$stepsPerDay))
df$DayOfWeek <- as.factor(weekdays(as.Date(df$date)))
levels(df$DayOfWeek) <- c("Weekday","Weekday","Weekend","Weekend","Weekday","Weekday","Weekday")
byIntervalSummaryWeekdayWeekend <- ddply(df, .(interval, DayOfWeek), summarise, averageStepsPerInterval = mean(steps, na.rm=TRUE))
library(lattice)
xyplot(byIntervalSummaryWeekdayWeekend$averageStepsPerInterval ~ byIntervalSummaryWeekdayWeekend$interval | byIntervalSummaryWeekdayWeekend$DayOfWeek,
type = "l", layout = c(1,2),
xlab = "Interval",
ylab = "Average steps per interval")
l
l
knit2html("ReproducibleResearch_assignment1.Rmd")
knit2html("ReproducibleResearch_assignment1.Rmd")
